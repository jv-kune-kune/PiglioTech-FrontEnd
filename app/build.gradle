plugins {
    alias(libs.plugins.android.application)
    id 'com.google.gms.google-services'
    id 'maven-publish'
    id 'com.google.firebase.crashlytics'
}

android {
    namespace 'com.northcoders.pigliotech_frontend'
    compileSdk 35

    defaultConfig {
        applicationId "com.northcoders.pigliotech_frontend"
        minSdk 26
        targetSdk 35
        versionCode 2
        versionName "1.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("pigliotech.keystore")
            storePassword System.getenv("KEYSTORE_PASSWORD") ?: "pizDy0-kynwek-cytqix"
            keyAlias "pigliotech"
            keyPassword System.getenv("KEY_PASSWORD") ?: "pizDy0-kynwek-cytqix"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures{
        dataBinding true
    }

    lint {
        baseline = file("lint-baseline.xml")
        // Disable warnings for unused declarations
        disable 'UnusedDeclaration'
        // Disable warning for unnecessary return statements in void methods
        disable 'RedundantReturn'
        // Configure lint to be less strict for tests
        checkTestSources false
        // Set test module configuration
        ignoreTestSources true
        // Disable warnings for Android Fragments
        disable 'FragmentConstructor'
        // Check for the IDE only
        checkDependencies true
        // Relax warning for model classes used with frameworks
        disable 'unused'
    }
}

dependencies {

    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core

    // UI Design
    implementation libs.appcompat.v110
    implementation libs.material.v100

    // Retrofit
    implementation libs.retrofit
    implementation libs.retrofit2.converter.gson
    implementation libs.logging.interceptor

    // Glide
    implementation libs.glide

    // Firebase
    implementation platform(libs.firebase.bom)
    implementation(libs.firebase.auth)
    implementation(libs.firebase.analytics)
    
    // Firebase Crashlytics
    implementation(libs.firebase.crashlytics)
    implementation(libs.firebase.crashlytics.ndk)

    // Barcode Scanner
    implementation(libs.play.services.code.scanner)
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = 'com.northcoders'
                artifactId = 'pigliotech-frontend'
                version = android.defaultConfig.versionName
                
                // For Android, specify the artifacts directly with the correct paths
                artifact("$buildDir/outputs/bundle/release/app-release.aab") {
                    classifier = 'release-aab'
                }
                
                // Additional artifact for debug build
                artifact("$buildDir/outputs/apk/debug/app-debug.apk") {
                    classifier = 'debug-apk'
                }
                
                // Release APK
                artifact("$buildDir/outputs/apk/release/app-release.apk") {
                    classifier = 'release-apk'
                }
                
                pom {
                    name = 'PiglioTech Frontend'
                    description = 'Android frontend for the PiglioTech book sharing application'
                    url = 'https://github.com/jv-kune-kune/PiglioTech-FrontEnd'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id = 'jv-kune-kune'
                            name = 'JV Kune Kune Team'
                            email = 'jvkunekune@gmail.com'
                        }
                    }
                }
            }
        }
        
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/jv-kune-kune/PiglioTech-FrontEnd")
                credentials {
                    username = System.getenv("GITHUB_USERNAME") ?: "jv-kune-kune"
                    password = System.getenv("GITHUB_TOKEN") ?: project.findProperty('github.token')
                }
            }
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}